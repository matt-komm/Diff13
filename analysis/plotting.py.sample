#!/usr/bin/python

import ROOT
import numpy
import random
import math
import os
import re
from optparse import OptionParser

ROOT.gROOT.Reset()
ROOT.gROOT.SetBatch(True)
ROOT.gStyle.SetOptStat(0)
ROOT.gStyle.SetOptFit(0)
ROOT.gROOT.Reset()
ROOT.gROOT.SetStyle("Plain")
ROOT.gStyle.SetOptStat(0)
ROOT.gStyle.SetOptFit(1111)
ROOT.gStyle.SetPadTopMargin(0.08)
ROOT.gStyle.SetPadLeftMargin(0.13)
ROOT.gStyle.SetPadRightMargin(0.26)
ROOT.gStyle.SetPadBottomMargin(0.15)
ROOT.gStyle.SetMarkerSize(0.16)
ROOT.gStyle.SetHistLineWidth(1)
ROOT.gStyle.SetStatFontSize(0.025)
ROOT.gStyle.SetLabelSize(0.055, "XYZ")

ROOT.gStyle.SetOptFit()
ROOT.gStyle.SetOptStat(0)

# For the canvas:
ROOT.gStyle.SetCanvasBorderMode(0)
ROOT.gStyle.SetCanvasColor(ROOT.kWhite)
ROOT.gStyle.SetCanvasDefH(600) #Height of canvas
ROOT.gStyle.SetCanvasDefW(600) #Width of canvas
ROOT.gStyle.SetCanvasDefX(0)   #POsition on screen
ROOT.gStyle.SetCanvasDefY(0)

# For the Pad:
ROOT.gStyle.SetPadBorderMode(0)
# ROOT.gStyle.SetPadBorderSize(Width_t size = 1)
ROOT.gStyle.SetPadColor(ROOT.kWhite)
#ROOT.gStyle.SetPadGridX(True)
#ROOT.gStyle.SetPadGridY(True)
ROOT.gStyle.SetGridColor(ROOT.kBlack)
ROOT.gStyle.SetGridStyle(2)
ROOT.gStyle.SetGridWidth(1)

# For the frame:

ROOT.gStyle.SetFrameBorderMode(0)
ROOT.gStyle.SetFrameBorderSize(0)
ROOT.gStyle.SetFrameFillColor(0)
ROOT.gStyle.SetFrameFillStyle(0)
ROOT.gStyle.SetFrameLineColor(1)
ROOT.gStyle.SetFrameLineStyle(1)
ROOT.gStyle.SetFrameLineWidth(0)

# For the histo:
# ROOT.gStyle.SetHistFillColor(1)
# ROOT.gStyle.SetHistFillStyle(0)
ROOT.gStyle.SetHistLineColor(1)
ROOT.gStyle.SetHistLineStyle(0)
ROOT.gStyle.SetHistLineWidth(1)
# ROOT.gStyle.SetLegoInnerR(Float_t rad = 0.5)
# ROOT.gStyle.SetNumberContours(Int_t number = 20)

ROOT.gStyle.SetEndErrorSize(2)
#ROOT.gStyle.SetErrorMarker(20)
ROOT.gStyle.SetErrorX(0.)

ROOT.gStyle.SetMarkerStyle(20)
#ROOT.gStyle.SetMarkerStyle(20)

#For the fit/function:
ROOT.gStyle.SetOptFit(1)
ROOT.gStyle.SetFitFormat("5.4g")
ROOT.gStyle.SetFuncColor(2)
ROOT.gStyle.SetFuncStyle(1)
ROOT.gStyle.SetFuncWidth(1)

#For the date:
ROOT.gStyle.SetOptDate(0)
# ROOT.gStyle.SetDateX(Float_t x = 0.01)
# ROOT.gStyle.SetDateY(Float_t y = 0.01)

# For the statistics box:
ROOT.gStyle.SetOptFile(0)
ROOT.gStyle.SetOptStat(0) # To display the mean and RMS:   SetOptStat("mr")
ROOT.gStyle.SetStatColor(ROOT.kWhite)
ROOT.gStyle.SetStatFont(42)
ROOT.gStyle.SetStatFontSize(0.025)
ROOT.gStyle.SetStatTextColor(1)
ROOT.gStyle.SetStatFormat("6.4g")
ROOT.gStyle.SetStatBorderSize(1)
ROOT.gStyle.SetStatH(0.1)
ROOT.gStyle.SetStatW(0.15)

ROOT.gStyle.SetHatchesSpacing(0.8)
ROOT.gStyle.SetHatchesLineWidth(2)

# ROOT.gStyle.SetStaROOT.TStyle(Style_t style = 1001)
# ROOT.gStyle.SetStatX(Float_t x = 0)
# ROOT.gStyle.SetStatY(Float_t y = 0)


#ROOT.gROOT.ForceStyle(True)
#end modified

# For the Global title:

ROOT.gStyle.SetOptTitle(0)

# ROOT.gStyle.SetTitleH(0) # Set the height of the title box
# ROOT.gStyle.SetTitleW(0) # Set the width of the title box
#ROOT.gStyle.SetTitleX(0.35) # Set the position of the title box
#ROOT.gStyle.SetTitleY(0.986) # Set the position of the title box
# ROOT.gStyle.SetTitleStyle(Style_t style = 1001)
#ROOT.gStyle.SetTitleBorderSize(0)

# For the axis titles:
ROOT.gStyle.SetTitleColor(1, "XYZ")
ROOT.gStyle.SetTitleFont(43, "XYZ")
ROOT.gStyle.SetTitleSize(32, "XYZ")
# ROOT.gStyle.SetTitleXSize(Float_t size = 0.02) # Another way to set the size?
# ROOT.gStyle.SetTitleYSize(Float_t size = 0.02)
ROOT.gStyle.SetTitleXOffset(1.135)
#ROOT.gStyle.SetTitleYOffset(1.2)
ROOT.gStyle.SetTitleOffset(1.32, "YZ") # Another way to set the Offset

# For the axis labels:

ROOT.gStyle.SetLabelColor(1, "XYZ")
ROOT.gStyle.SetLabelFont(43, "XYZ")
ROOT.gStyle.SetLabelOffset(0.0077, "XYZ")
ROOT.gStyle.SetLabelSize(28, "XYZ")
#ROOT.gStyle.SetLabelSize(0.04, "XYZ")

# For the axis:

ROOT.gStyle.SetAxisColor(1, "XYZ")
ROOT.gStyle.SetAxisColor(1, "XYZ")
ROOT.gStyle.SetStripDecimals(True)
ROOT.gStyle.SetTickLength(0.03, "Y")
ROOT.gStyle.SetTickLength(0.05, "X")
ROOT.gStyle.SetNdivisions(505, "X")
ROOT.gStyle.SetNdivisions(512, "Y")

ROOT.gStyle.SetPadTickX(1)  # To get tick marks on the opposite side of the frame
ROOT.gStyle.SetPadTickY(1)

# Change for log plots:
ROOT.gStyle.SetOptLogx(0)
ROOT.gStyle.SetOptLogy(0)
ROOT.gStyle.SetOptLogz(0)

#ROOT.gStyle.SetPalette(1) #(1,0)

# another top group addition

# Postscript options:
#ROOT.gStyle.SetPaperSize(20., 20.)
#ROOT.gStyle.SetPaperSize(ROOT.TStyle.kA4)
#ROOT.gStyle.SetPaperSize(27., 29.7)
#ROOT.gStyle.SetPaperSize(27., 29.7)
ROOT.TGaxis.SetMaxDigits(3)
ROOT.gStyle.SetLineScalePS(2)

# ROOT.gStyle.SetLineStyleString(Int_t i, const char* text)
# ROOT.gStyle.SetHeaderPS(const char* header)
# ROOT.gStyle.SetTitlePS(const char* pstitle)
#ROOT.gStyle.SetColorModelPS(1)

# ROOT.gStyle.SetBarOffset(Float_t baroff = 0.5)
# ROOT.gStyle.SetBarWidth(Float_t barwidth = 0.5)
# ROOT.gStyle.SetPaintTextFormat(const char* format = "g")
# ROOT.gStyle.SetPalette(Int_t ncolors = 0, Int_t* colors = 0)
# ROOT.gStyle.SetTimeOffset(Double_t toffset)
# ROOT.gStyle.SetHistMinimumZero(kTRUE)
ROOT.gStyle.SetPalette(1)
ROOT.gStyle.SetPaintTextFormat("7.4f")



colors=[]
def newColor(red,green,blue):
    newColor.colorindex+=1
    color=ROOT.TColor(newColor.colorindex,red,green,blue)
    colors.append(color)
    return color
    
newColor.colorindex=301

def getDarkerColor(color):
    darkerColor=newColor(color.GetRed()*0.6,color.GetGreen()*0.6,color.GetBlue()*0.6)
    return darkerColor

#MG
'''
qcdFitResult="((Reconstructed_1__nSelectedJet==1)*0.240+"
qcdFitResult+="(Reconstructed_1__nSelectedJet==2)*(Reconstructed_1__nSelectedBJet==0)*0.219+"
qcdFitResult+="(Reconstructed_1__nSelectedJet==3)*(Reconstructed_1__nSelectedBJet==0)*0.176+"
qcdFitResult+="(Reconstructed_1__nSelectedJet==3)*(Reconstructed_1__nSelectedBJet==1)*0.149+"
qcdFitResult+="(Reconstructed_1__nSelectedJet==3)*(Reconstructed_1__nSelectedBJet==2)*0.132)"
'''
'''
#MG barrel
qcdFitResult="((Reconstructed_1__nSelectedJet==1)*0.234+"
qcdFitResult+="(Reconstructed_1__nSelectedJet==2)*(Reconstructed_1__nSelectedBJet==0)*0.208+"
qcdFitResult+="(Reconstructed_1__nSelectedJet==3)*(Reconstructed_1__nSelectedBJet==0)*0.158+"
qcdFitResult+="(Reconstructed_1__nSelectedJet==3)*(Reconstructed_1__nSelectedBJet==1)*0.135+"
qcdFitResult+="(Reconstructed_1__nSelectedJet==3)*(Reconstructed_1__nSelectedBJet==2)*0.072)"
'''
'''
#MG forward
qcdFitResult="((Reconstructed_1__nSelectedJet==1)*0.277+"
qcdFitResult+="(Reconstructed_1__nSelectedJet==2)*(Reconstructed_1__nSelectedBJet==0)*0.270+"
qcdFitResult+="(Reconstructed_1__nSelectedJet==3)*(Reconstructed_1__nSelectedBJet==0)*0.226+"
qcdFitResult+="(Reconstructed_1__nSelectedJet==3)*(Reconstructed_1__nSelectedBJet==1)*0.177+"
qcdFitResult+="(Reconstructed_1__nSelectedJet==3)*(Reconstructed_1__nSelectedBJet==2)*1.615)"
'''
'''
#AMC
qcdFitResult="((Reconstructed_1__nSelectedJet==2)*(Reconstructed_1__nSelectedBJet==0)*0.247+"
qcdFitResult+="(Reconstructed_1__nSelectedJet==3)*(Reconstructed_1__nSelectedBJet==0)*0.222+"
qcdFitResult+="(Reconstructed_1__nSelectedJet==3)*(Reconstructed_1__nSelectedBJet==1)*0.059+"
qcdFitResult+="(Reconstructed_1__nSelectedJet==3)*(Reconstructed_1__nSelectedBJet==2)*0.223)"

'''
#qcdFitResult="1"

globalDataWeight="1"
#globalDataWeight+="*(Reconstructed_1__Flag_CSCTightHaloFilter==1)"
#globalDataWeight+="*(Reconstructed_1__Flag_EcalDeadCellTriggerPrimitiveFilter==1)"
#globalDataWeight+="*(Reconstructed_1__Flag_HBHENoiseFilter==1)"
#globalDataWeight+="*(Reconstructed_1__Flag_METFilters==1)"
#globalDataWeight+="*(Reconstructed_1__Flag_ecalLaserCorrFilter==1)"
#globalDataWeight+="*(Reconstructed_1__Flag_eeBadScFilter==1)"
#globalDataWeight+="*(Reconstructed_1__Flag_goodVertices==1)"
#globalDataWeight+="*(Reconstructed_1__Flag_hcalLaserEventFilter==1)"
#globalDataWeight+="*(Reconstructed_1__Flag_trackingFailureFilter==1)"
#globalDataWeight+="*(Reconstructed_1__Flag_trkPOGFilters==1)"

globalMCWeight="Reconstructed_1__btagging_nominal*Reconstructed_1__PU69000_weight*(Reconstructed_1__HLT_IsoMu20_v1==1)*2119.4/0.7*mc_weight"

#MG
'''
mcFitResult="((Reconstructed_1__nSelectedJet==1)*1.130+"
mcFitResult+="(Reconstructed_1__nSelectedJet==2)*(Reconstructed_1__nSelectedBJet==0)*1.197+"
mcFitResult+="(Reconstructed_1__nSelectedJet==3)*(Reconstructed_1__nSelectedBJet==0)*1.213+"
mcFitResult+="(Reconstructed_1__nSelectedJet==3)*(Reconstructed_1__nSelectedBJet==1)*0.982+"
mcFitResult+="(Reconstructed_1__nSelectedJet==3)*(Reconstructed_1__nSelectedBJet==2)*0.838)"
'''
'''
#MG barrel
mcFitResult="((Reconstructed_1__nSelectedJet==1)*1.174+"
mcFitResult+="(Reconstructed_1__nSelectedJet==2)*(Reconstructed_1__nSelectedBJet==0)*1.271+"
mcFitResult+="(Reconstructed_1__nSelectedJet==3)*(Reconstructed_1__nSelectedBJet==0)*1.286+"
mcFitResult+="(Reconstructed_1__nSelectedJet==3)*(Reconstructed_1__nSelectedBJet==1)*1.011+"
mcFitResult+="(Reconstructed_1__nSelectedJet==3)*(Reconstructed_1__nSelectedBJet==2)*0.853)"
'''
'''
#MG foward
mcFitResult="((Reconstructed_1__nSelectedJet==1)*0.634+"
mcFitResult+="(Reconstructed_1__nSelectedJet==2)*(Reconstructed_1__nSelectedBJet==0)*0.783+"
mcFitResult+="(Reconstructed_1__nSelectedJet==3)*(Reconstructed_1__nSelectedBJet==0)*0.845+"
mcFitResult+="(Reconstructed_1__nSelectedJet==3)*(Reconstructed_1__nSelectedBJet==1)*0.698+"
mcFitResult+="(Reconstructed_1__nSelectedJet==3)*(Reconstructed_1__nSelectedBJet==2)*0.412)"
'''
'''
#AMC
mcFitResult="((Reconstructed_1__nSelectedJet==2)*(Reconstructed_1__nSelectedBJet==0)*0.997+"
mcFitResult+="(Reconstructed_1__nSelectedJet==3)*(Reconstructed_1__nSelectedBJet==0)*0.915+"
mcFitResult+="(Reconstructed_1__nSelectedJet==3)*(Reconstructed_1__nSelectedBJet==1)*0.965+"
mcFitResult+="(Reconstructed_1__nSelectedJet==3)*(Reconstructed_1__nSelectedBJet==2)*0.800)"
'''
#mcFitResult="1"
'''
tChanYield="1.0"
topbgYield="1.0"
otherYield="1.0"
qcdMCYield="1.0"
qcdDDYield="1.0"

'''
tChanYield="1.35"
topbgYield="((Reconstructed_1__nSelectedBJet==0)*2.26+(Reconstructed_1__nSelectedBJet>0)*0.99)"
otherYield="((Reconstructed_1__nSelectedBJet==0)*1.08+(Reconstructed_1__nSelectedBJet>0)*1.697)"
qcdMCYield="1"
qcdDDYield="((Reconstructed_1__nSelectedJet==2)*(Reconstructed_1__nSelectedBJet==0)*0.22+"
qcdDDYield+="(Reconstructed_1__nSelectedJet==3)*(Reconstructed_1__nSelectedBJet==0)*0.13+"
qcdDDYield+="(Reconstructed_1__nSelectedJet==3)*(Reconstructed_1__nSelectedBJet==1)*0.17+"
qcdDDYield+="(Reconstructed_1__nSelectedJet==3)*(Reconstructed_1__nSelectedBJet==2)*0.21)"

'''
#tChanYield="0.62"
tChanYield=mcFitResult
topbgYield=mcFitResult
otherYield=mcFitResult
qcdMCYield=mcFitResult
qcdDDYield=qcdFitResult
'''

region = "_iso"

sampleDict = {
    "tChannel":
    {
        "processes":[
            "ST_t-channel_4f_leptonDecays_13TeV-amcatnlo-pythia8_TuneCUETP8M1"+region,
            "ST_t-channel_4f_leptonDecays_13TeV-amcatnlo-pythia8_TuneCUETP8M1_ext"+region,
        ],
        "weight":"0.5*((Generated_1__genweight<0)*(-1)+(Generated_1__genweight>0)*1)*"+globalMCWeight+"*"+tChanYield
    },

    "tWChannel":
    {
        "processes":[
            "ST_tW_top_5f_inclusiveDecays_13TeV-powheg-pythia8_TuneCUETP8M1"+region,
            "ST_tW_antitop_5f_inclusiveDecays_13TeV-powheg-pythia8_TuneCUETP8M1"+region
        ],
        "weight":"((Generated_1__genweight<0)*(-1)+(Generated_1__genweight>0)*1)*"+globalMCWeight+"*"+topbgYield
    },

    "TTJets":
    {
        "processes":[
            "TT_TuneCUETP8M1_13TeV-powheg-pythia8_ext"+region
        ],
        "weight":"((Generated_1__genweight<0)*(-1)+(Generated_1__genweight>0)*1)*"+globalMCWeight+"*"+topbgYield,
    },
    
    "WJetsAMC":
    {
        "processes":[
            "WJetsToLNu_TuneCUETP8M1_13TeV-amcatnloFXFX-pythia8"+region
        ],
        "weight":"((Generated_1__genweight<0)*(-1)+(Generated_1__genweight>0)*1)*"+globalMCWeight+"*"+otherYield,
    },
    
    "WJetsMG":
    {
        "processes":[
            "WJetsToLNu_TuneCUETP8M1_13TeV-madgraphMLM-pythia8"+region
        ],
        
        "weight":"((Generated_1__genweight<0)*(-1)+(Generated_1__genweight>0)*1)*"+globalMCWeight+"*"+otherYield,
    },
    
    
    "DY":
    {
        "processes":[
            "DYJetsToLL_M-50_TuneCUETP8M1_13TeV-amcatnloFXFX-pythia8"+region,
        ],
        "weight":"((Generated_1__genweight<0)*(-1)+(Generated_1__genweight>0)*1)*"+globalMCWeight+"*"+otherYield
    },

    "QCD":
    {
        "processes":[
            "QCD_Pt-20toInf_MuEnrichedPt15_TuneCUETP8M1_13TeV_pythia8"+region,
        ],
        "weight":"((Generated_1__genweight<0)*(-1)+(Generated_1__genweight>0)*1)*"+globalMCWeight
    },
    
    
    
    
    "MC_antiiso":
    {
        "processes":[
            "ST_t-channel_4f_leptonDecays_13TeV-amcatnlo-pythia8_TuneCUETP8M1_antiiso",
            "ST_tW_top_5f_inclusiveDecays_13TeV-powheg-pythia8_TuneCUETP8M1_antiiso",
            "ST_tW_antitop_5f_inclusiveDecays_13TeV-powheg-pythia8_TuneCUETP8M1_antiiso",
            "TT_TuneCUETP8M1_13TeV-powheg-pythia8_ext_antiiso",
            "WJetsToLNu_TuneCUETP8M1_13TeV-amcatnloFXFX-pythia8_antiiso",
            #"WJetsToLNu_TuneCUETP8M1_13TeV-madgraphMLM-pythia8_antiiso",
            "DYJetsToLL_M-50_TuneCUETP8M1_13TeV-amcatnloFXFX-pythia8_antiiso"
        ],
        "weight":"(-1.0)*((Generated_1__genweight<0)*(-1)+(Generated_1__genweight>0)*1)*"+globalMCWeight
    },
    
    "data1_antiiso":
    {
        "processes":[
            "SingleMuon_Run2015D-05Oct2015-v1_antiiso",
        ],
        "weight":"((Reconstructed_1__HLT_IsoMu20_v2==1)+(Reconstructed_1__HLT_IsoMu20_v3==1))*"+globalDataWeight
    },
    
    "data2_antiiso":
    {
        "processes":[
            "SingleMuon_Run2015D-PromptReco-v4_antiiso",
        ],
        "weight":"(Reconstructed_1__HLT_IsoMu20_v3==1)*"+globalDataWeight
    },
    
    
    
    "data1":
    {
        "processes":[
            "SingleMuon_Run2015D-05Oct2015-v1"+region,
        ],
        "weight":"((Reconstructed_1__HLT_IsoMu20_v2==1)+(Reconstructed_1__HLT_IsoMu20_v3==1))*"+globalDataWeight
    },
    
    "data2":
    {
        "processes":[
            "SingleMuon_Run2015D-PromptReco-v4"+region,
        ],
        
        "weight":"(Reconstructed_1__HLT_IsoMu20_v3==1)*"+globalDataWeight
    }
}






sets = {
    "tChannel": {
        "samples": ["tChannel"],
        "weight":"1",
        "color":ROOT.gROOT.GetColor(ROOT.kRed),
        "title":"#it{t}-channel",
    },
    "tWChannel": {
        "samples": ["tWChannel"],
        "weight":"1",
        "color":ROOT.gROOT.GetColor(ROOT.kOrange),
        "title":"tW",
    },
    "TTJets": {
        "samples": ["TTJets"],
        "weight":"1",
        "color":ROOT.gROOT.GetColor(ROOT.kOrange-3),
        "title":"t#bar{t}",
    },
    "WJetsMG": {
        "samples": ["WJetsMG"],
        "weight":"1",
        "color":ROOT.gROOT.GetColor(ROOT.kGreen-2),
        "title":"W+jets",
        #"addtitle":"(MadGraph)",
    },
    "WJetsMGBF": {
        "samples": ["WJetsMG"],
        "weight":"(Reconstructed_1__nBFlavorSelectedJet>0)",
        "color":ROOT.gROOT.GetColor(ROOT.kGreen+2),
        "title":"W+bX",
        "addtitle":"(MadGraph)",
    },
    "WJetsMGCF": {
        "samples": ["WJetsMG"],
        "weight":"(Reconstructed_1__nBFlavorSelectedJet==0)*(Reconstructed_1__nCFlavorSelectedJet>0)",
        "color":ROOT.gROOT.GetColor(ROOT.kGreen-3),
        "title":"W+cX",
        #"addtitle":"(MadGraph)",
    },
    "WJetsMGLF": {
        "samples": ["WJetsMG"],
        "weight":"(Reconstructed_1__nBFlavorSelectedJet==0)*(Reconstructed_1__nCFlavorSelectedJet==0)",
        "color":ROOT.gROOT.GetColor(ROOT.kGreen-7),
        "title":"W+LF",
        #"addtitle":"(MadGraph)",
    },
    "WJetsAMC": {
        "samples": ["WJetsAMC"],
        "weight":"1",
        "color":ROOT.gROOT.GetColor(ROOT.kGreen-2),
        "title":"W+jets",
        "addtitle":"(aMC@NLO)",
    },
    "DY": {
        "samples": ["DY"],
        "weight":"1",
        "color":ROOT.gROOT.GetColor(ROOT.kBlue-1),
        "title":"Z/#gamma+jets",
        #"addtitle":"(#times 1.8)",
    },
    "QCD_MC": {
        "samples": ["QCD"],
        "weight":qcdMCYield,
        "color":ROOT.gROOT.GetColor(ROOT.kGray),
        "title":"QCD (MC)",# #lower[-0.06]{#scale[0.85]{#times#frac{1}{5}}}",
    },
            
    "QCD_DD": {
        "samples": ["data1_antiiso","data2_antiiso","MC_antiiso"],
        "weight":qcdDDYield,
        "color":ROOT.gROOT.GetColor(ROOT.kGray),
        "title":"QCD (DD)",# #lower[-0.06]{#scale[0.85]{#times#frac{1}{5}}}",
    },
    "data": {
        "samples": ["data1","data2"],
        "weight":"1",
        "color":ROOT.gROOT.GetColor(ROOT.kBlack),
        "title":"Data",
    }
}

parser = OptionParser()
(options, args) = parser.parse_args()

rootFiles=[]

basedirMC = "/nfs/user/mkomm/ST13/evaluate25ns"
matchMC = re.compile("mc[0-9]+.root")
basedirData = "/nfs/user/mkomm/ST13/evaluate25nsData"
matchData = re.compile("data[0-9]+.root")

for f in os.listdir(basedirMC):
    if matchMC.match(f):
        rootFiles.append(os.path.join(basedirMC,f))

for f in os.listdir(basedirData):
    if matchData.match(f):
        rootFiles.append(os.path.join(basedirData,f))
        
print "found ",len(rootFiles)," files"

def addUnderflowOverflow(hist):
    hist.SetBinContent(1,hist.GetBinContent(0)+hist.GetBinContent(1))
    N=hist.GetNbinsX()
    hist.SetBinContent(N,hist.GetBinContent(N)+hist.GetBinContent(N+1))
    hist.SetBinContent(0,0)
    hist.SetBinContent(N+1,0)
    hist.SetEntries(hist.GetEntries()-4)
        

for setName in sets.keys():
    sets[setName]["darkColor"]=getDarkerColor(sets[setName]["color"])



binning=30

for category in [
    #["1j","(Reconstructed_1__nSelectedJet==1)"],
    ["2j0t","(Reconstructed_1__nSelectedJet==2)*(Reconstructed_1__nSelectedBJet==0)"],
    ["2j1t","(Reconstructed_1__nSelectedJet==2)*(Reconstructed_1__nSelectedBJet==1)"],

    #["3j0t","(Reconstructed_1__nSelectedJet==3)*(Reconstructed_1__nSelectedBJet==0)"],
    ["3j1t","(Reconstructed_1__nSelectedJet==3)*(Reconstructed_1__nSelectedBJet==1)"],
    ["3j2t","(Reconstructed_1__nSelectedJet==3)*(Reconstructed_1__nSelectedBJet==2)"]
]:
    if category[0]!=args[0]:
        continue
    
    for var in [
        ["nVertices","Reconstructed_1__PU_1__nVertices","#vertices","","1",26,-0.5,25.5],
        
        ["fit","(SingleTop_1__mtw_beforePz<50.0)*SingleTop_1__mtw_beforePz+(SingleTop_1__mtw_beforePz>50.0)*(Reconstructed_1__BDT_adaboost04_minnode001_maxvar2_ntree600_invboost*50.0+100.0)","fit variable","","1",binning,0,150],
        ["BDT_adaboost04_minnode001_maxvar2_ntree600_invboost","Reconstructed_1__BDT_adaboost04_minnode001_maxvar2_ntree600_invboost","BDT discriminant","","1",binning,-1,1],

        ["muon_logpt","Reconstructed_1__TightMuon_1__Pt","muon p_{T}","GeV","1",binning,numpy.logspace(1.3,2.35,num=(binning+1)),0,"logx"],
        ["muon_pt","Reconstructed_1__TightMuon_1__Pt","muon p_{T}","GeV","1",binning,0,200],
        ["muon_eta","Reconstructed_1__TightMuon_1__Eta","muon #eta","","1",binning,-2.6,2.6],
        ["muon_abseta","fabs(Reconstructed_1__TightMuon_1__Eta)","muon #eta","","1",binning,0.0,2.6],
        
        ["ljet_logpt","SingleTop_1__LightJet_1__Pt","j' p_{T}","GeV","1",binning,numpy.logspace(1.5,2.5,num=(binning+1)),0,"logx"],
        ["ljet_pt","SingleTop_1__LightJet_1__Pt","j' p_{T}","GeV","1",binning,0,250],
        ["ljet_eta","SingleTop_1__LightJet_1__Eta","j' |#eta|","","1",binning,-5.0,5.0],
        ["ljet_abseta","fabs(SingleTop_1__LightJet_1__Eta)","j' |#eta|","","1",binning,0,5.0],
        ["ljet_mass","SingleTop_1__LightJet_1__Mass","j' mass","GeV","1",binning,0.0,40.0],
        ["ljet_nhf","SingleTop_1__LightJet_1__neutralHadronEnergy","j' neutral had. E","GeV","1",binning,0.0,1500.0,"y"],
        ["ljet_csv","SingleTop_1__LightJet_1__pfCombinedInclusiveSecondaryVertexV2BJetTags","j' CSV","","1",binning,0,1],
        ["ljet_n60","SingleTop_1__LightJet_1__n60","j' n60","","1",41,-0.5,40.5],
        ["ljet_n90","SingleTop_1__LightJet_1__n90","j' n90","","1",51,-0.5,50.5],

        ["bjet_logpt","SingleTop_1__BJet_1__Pt","b jet p_{T}","GeV","1",binning,numpy.logspace(1.5,2.5,num=(binning+1)),0,"logx"],
        ["bjet_pt","SingleTop_1__BJet_1__Pt","b jet p_{T}","GeV","1",binning,0,250],
        ["bjet_eta","SingleTop_1__BJet_1__Eta","b jet #eta","","1",binning,-5.0,5.0],
        ["bjet_abseta","fabs(SingleTop_1__BJet_1__Eta)","b-jet |#eta|","","1",binning,0,5.0],
        ["bjet_mass","SingleTop_1__BJet_1__Mass","b jet mass","GeV","1",binning,0.0,40.0],
        ["bjet_n60","SingleTop_1__BJet_1__n60","b jet n60","","1",41,-0.5,40.5],
        ["bjet_n90","SingleTop_1__BJet_1__n90","b jet n90","","1",51,-0.5,50.5],
        
        ["bjet_muon_deltaR","SingleTop_1__BJet_TightMuon_dR","#Delta R(b jet,#mu)","","1",binning,0,6],
        ["bjet_muon_deltaEta","fabs(SingleTop_1__BJet_TightMuon_dEta)","|#Delta #eta(b jet,#mu)|","","1",binning,0,5],
        ["bjet_muon_deltaPhi","SingleTop_1__BJet_TightMuon_dPhi","#Delta #phi(b jet,#mu)","","1",binning,0,3.2],

        ["dijet_pt","SingleTop_1__Dijet_1__Pt","dijet p_{T}","GeV","1",binning,0,350],
        ["dijet_eta","SingleTop_1__Dijet_1__Eta","dijet #eta","","1",binning,-6.5,6.5],
        ["dijet_abseta","fabs(SingleTop_1__Dijet_1__Eta)","dijet |#eta|","","1",binning,0,6.5],
        ["dijet_mass","SingleTop_1__Dijet_1__Mass","dijet mass","GeV","1",binning,0,800],
        ["dijet_deltaEta","fabs(SingleTop_1__Dijet_1__DEta)","|#Delta #eta(j',b jet)|","","1",binning,0,8],
        ["dijet_deltaR","SingleTop_1__Dijet_1__DR","#Delta R(j',b jet)","","1",binning,0,7],
        ["dijet_deltaPhi","SingleTop_1__Dijet_1__DPhi","#Delta #phi(j',b jet)","","1",binning,0,3.2],

        #["ljet_logpt","SingleTop_1__BJet_1__Pt","light jet p_{T}","GeV","1",binning,numpy.logspace(1.5,2.5,num=(binning+1)),0,"logx"],
        #["ljet_pt","SingleTop_1__BJet_1__Pt","light jet p_{T}","GeV","1",binning,0,250],
        #["ljet_abseta","fabs(SingleTop_1__BJet_1__Eta)","light jet |#eta|","","1",binning,0,5.0],
        
        ["met","Reconstructed_1__MET_1__Pt","MET","GeV","1",binning,0,200],
        ["met_phi","Reconstructed_1__MET_1__Phi","MET #phi","","1",binning,-3.2,3.2],
        ["mtw","SingleTop_1__mtw_beforePz","MTW","GeV","1",binning,0,200],
        ["muon_met_deltaPhi","fabs(SingleTop_1__TightMuon_MET_dPhi)","|#Delta #phi(MET,#mu)|","","1",binning,0,3.2],
        
        ["top_logpt","SingleTop_1__Top_1__Pt","top p_{T}","GeV","1",binning,numpy.logspace(1,2.5,num=(binning+1)),0,"logx"],
        ["top_pt","SingleTop_1__Top_1__Pt","top p_{T}","GeV","1",binning,0,350],
        ["top_eta","SingleTop_1__Top_1__Eta","top #eta","","1",binning,-6,6],
        ["top_abseta","fabs(SingleTop_1__Top_1__Eta)","top |#eta|","","1",binning,0,6],
        ["top_logmass","SingleTop_1__Top_1__Mass","top mass","GeV","1",binning,numpy.logspace(1.9,2.9,num=(binning+1)),0,"logx"],
        ["top_mass","SingleTop_1__Top_1__Mass","top mass","GeV","1",binning,0,800],

        
        
        ["cosTheta_tPL","SingleTop_1__cosTheta_tPL","cos#theta_{l,q}^{top}","","1",binning,-1,1],
    
        ["shat_logpt","SingleTop_1__Shat_1__Pt","#hat{s} p_{T}","GeV","1",binning,numpy.logspace(0,2.5,num=(binning+1)),0,"logx"],
        ["shat_pt","SingleTop_1__Shat_1__Pt","#hat{s} p_{T}","GeV","1",binning,0,300],
        ["shat_logmass","SingleTop_1__Shat_1__Mass","#hat{s}","GeV","1",binning,numpy.logspace(1,3.2,num=(binning+1)),0,"logx"],
        ["shat_mass","SingleTop_1__Shat_1__Mass","#hat{s}","GeV","1",binning,0,1500],
        ["shat_eta","SingleTop_1__Shat_1__Eta","#hat{s} #eta","","1",binning,-7,7],
        ["shat_abseta","fabs(SingleTop_1__Shat_1__Eta)","#hat{s} |#eta|","","1",binning,0,7],


        ["aplanarity","Reconstructed_1__logaplanarity","log(aplanarity)","","1",binning,-12,0.0],
        ["circularity","Reconstructed_1__circularity","circularity","","1",binning,0,1],
        ["C","Reconstructed_1__C","C","","1",binning,0,1],
        ["isotropy","Reconstructed_1__isotropy","isotropy","","1",binning,0,1],
        ["sphericity","Reconstructed_1__sphericity","sphericity","","1",binning,0,1],

         
    ]:

        for qcd in [
            ["qcdnone","1",""],
            ["qcdmtw","(SingleTop_1__mtw_beforePz>50.0)","MTW>50#kern[-0.5]{ }GeV"],
            #["bdt","(SingleTop_1__mtw_beforePz>50.0)*(Reconstructed_1__BDT_boost02_minnode005_maxvar2_ntree1000_invboost>0.2)","MTW>50#kern[-0.5]{ }GeV & BDT>0.2"],
            #["bdtonly","(Reconstructed_1__BDT_boost02_minnode005_maxvar2_ntree1000_invboost>0.2)","BDT>0.2"],
            #["barrel","(Reconstructed_1__isBarrel==1)","Barrel"],
            #["foward","(Reconstructed_1__isBarrel==0)","Forward"],
            
        ]:
            print category[0],var[0],qcd[0]
            
            outputName=category[0]+"_"+var[0]+"_"+qcd[0]
            variableName=var[1]
            variableTitle=var[2]
            unit=var[3]
            weight=var[4]+"*"+category[1]+"*"+qcd[1]
            nbins=var[5]
            if type(var[6])==numpy.ndarray:
                binarray=var[6]
            else:
                binarray=numpy.linspace(var[6],var[7],num=(nbins+1),endpoint=True)
            
            logx=False
            logy=False
            if len(var)==9:
                logx=var[8].find("x")!=-1
                logy=var[8].find("y")!=-1
            
            stackMC = ROOT.THStack()
            stackMCHists=[]
            
            legendEntries=[]
            
            sumHistMC = None
            for setName in (["tChannel","tWChannel","TTJets","WJetsMGBF","WJetsMGCF","WJetsMGLF","DY","QCD_DD"]):
                setHist=ROOT.TH1F("setHist"+setName+str(random.random()),"",nbins,binarray)
                setHist.Sumw2()
                setHist.SetFillColor(sets[setName]["color"].GetNumber())
                setHist.SetFillStyle(1001)
                setHist.SetLineStyle(1)
                setHist.SetLineWidth(2)
                setHist.SetLineColor(sets[setName]["darkColor"].GetNumber())
                setHist.SetDirectory(0)
                for sampleName in sets[setName]["samples"]:
                    
                    sample=sampleDict[sampleName]
                    
                    for process in sample["processes"]:
                        for f in rootFiles:
                            
                            rootFile = ROOT.TFile(f)
                            tree = rootFile.Get(process)
                            if (tree):
                                
                                tempHist=setHist.Clone()
                                tempHist.SetName(setHist.GetName()+process+str(random.random()))
                                tree.Project(tempHist.GetName(),variableName,sets[setName]["weight"]+"*"+sample["weight"]+"*"+weight)
                                tempHist.SetDirectory(0)
                                addUnderflowOverflow(tempHist)
                                setHist.Add(tempHist)
                                #print f,tree.GetEntries(),tempHist.GetEntries()
                            rootFile.Close()
                            
                            
                if sumHistMC==None:
                    sumHistMC=setHist.Clone()
                else:
                    sumHistMC.Add(setHist)
                #addUnderflowOverflow(sampleHist)
                print "\t",setName,setHist.GetEntries(),setHist.Integral()
                stackMC.Add(setHist,"HIST F")
                stackMCHists.append(setHist)
                if sets[setName].has_key("addtitle"):
                    legendEntries.append(["",sets[setName]["addtitle"],""])
                legendEntries.append([setHist,sets[setName]["title"],"F"])
                
                
             
            sumHistData = None
                
            for setName in ["data"]:
                setHist=ROOT.TH1F("setHist"+setName+str(random.random()),"",nbins,binarray)
                setHist.Sumw2()
                setHist.SetMarkerColor(sets[setName]["color"].GetNumber())
                setHist.SetMarkerStyle(20)
                setHist.SetMarkerSize(1)
                setHist.SetFillStyle(0)
                setHist.SetLineStyle(1)
                setHist.SetLineWidth(1)
                setHist.SetDirectory(0)
                for sampleName in sets[setName]["samples"]:
                    sample=sampleDict[sampleName]
                    
                    for process in sample["processes"]:
                        for f in rootFiles:
                            rootFile = ROOT.TFile(f)
                            tree = rootFile.Get(process)
                            if (tree):
                                tempHist=setHist.Clone()
                                tempHist.SetName(setHist.GetName()+process+str(random.random()))
                                tree.Project(tempHist.GetName(),variableName,sets[setName]["weight"]+"*"+sample["weight"]+"*"+weight)
                                tempHist.SetDirectory(0)
                                addUnderflowOverflow(tempHist)
                                setHist.Add(tempHist)
                            rootFile.Close()
                            
                if sumHistData==None:
                    sumHistData=setHist.Clone()
                else:
                    sumHistData.Add(setHist)
                #addUnderflowOverflow(sampleHist)
                print "\t",setName,setHist.GetEntries(),setHist.Integral()
                
            legendEntries.append([sumHistData,"Data","P"])
                
            scale = sumHistData.Integral()/sumHistMC.Integral()
            print "\tMC=",sumHistMC.Integral(),", data=",sumHistData.Integral(),", L=",scale
                        
            '''
            for h in stackMCHists:
                h.Scale(scale)
            sumHistMC.Scale(scale)
            '''
            
            cv = ROOT.TCanvas("cv"+outputName+str(random.random()),"",800,600)
            cv.Divide(1,2,0,0)
            cv.GetPad(1).SetPad(0.0, 0.0, 1.0, 1.0)
            cv.GetPad(1).SetFillStyle(4000)
            cv.GetPad(2).SetPad(0.0, 0.00, 1.0,1.0)
            cv.GetPad(2).SetFillStyle(4000)
            
            cvxmin=0.14
            cvxmax=0.74
            cvymin=0.14
            cvymax=0.935
            resHeight=0.35
            
            for i in range(1,3):
                #for the canvas:
                cv.GetPad(i).SetBorderMode(0)
                cv.GetPad(i).SetGridx(False)
                cv.GetPad(i).SetGridy(False)


                #For the frame:
                cv.GetPad(i).SetFrameBorderMode(0)
                cv.GetPad(i).SetFrameBorderSize(1)
                cv.GetPad(i).SetFrameFillColor(0)
                cv.GetPad(i).SetFrameFillStyle(0)
                cv.GetPad(i).SetFrameLineColor(1)
                cv.GetPad(i).SetFrameLineStyle(1)
                cv.GetPad(i).SetFrameLineWidth(1)

                # Margins:
                cv.GetPad(i).SetLeftMargin(cvxmin)
                cv.GetPad(i).SetRightMargin(1-cvxmax)
                
                # For the Global title:
                cv.GetPad(i).SetTitle("")
                
                # For the axis:
                cv.GetPad(i).SetTickx(1)  # To get tick marks on the opposite side of the frame
                cv.GetPad(i).SetTicky(1)

                # Change for log plots:
                cv.GetPad(i).SetLogx(0)
                cv.GetPad(i).SetLogy(0)
                cv.GetPad(i).SetLogz(0)
            
            
            
            cv.GetPad(2).SetTopMargin(1-cvymax)
            cv.GetPad(2).SetBottomMargin(resHeight)
            cv.GetPad(1).SetTopMargin(1-resHeight)
            cv.GetPad(1).SetBottomMargin(cvymin)
            
            cv.cd(2)

            if logy:
                axis=ROOT.TH2F("axis"+str(random.random()),";"+variableTitle+";Events",50,binarray[0],binarray[-1],50,0.5,math.exp(1.3*math.log(max([sumHistMC.GetMaximum(),sumHistData.GetMaximum(),1.0]))))
            else:
                axis=ROOT.TH2F("axis"+str(random.random()),";"+variableTitle+";Events",50,binarray[0],binarray[-1],50,0.0,1.3*max([sumHistMC.GetMaximum(),sumHistData.GetMaximum(),1.0]))


            axis.GetYaxis().SetNdivisions(506)
            axis.GetXaxis().SetNdivisions(504)
            axis.GetXaxis().SetLabelSize(0)
            axis.GetXaxis().SetTitle("")
            axis.GetXaxis().SetTickLength(0.015/(1-cv.GetPad(2).GetLeftMargin()-cv.GetPad(2).GetRightMargin()))
            axis.GetYaxis().SetTickLength(0.015/(1-cv.GetPad(2).GetTopMargin()-cv.GetPad(2).GetBottomMargin()))
            #axis.GetYaxis().SetNoExponent(True)
            axis.Draw("AXIS")
            
            stackMC.Draw("Same")
            stackMC.GetXaxis().SetTitle(variableTitle)
            stackMC.GetYaxis().SetTitle("Events")
            
            sumHistData.Draw("PESame")
            
            if logy:
                cv.GetPad(2).SetLogy(1)
            if logx:
                cv.GetPad(2).SetLogx(1)
                cv.GetPad(1).SetLogx(1)
            ROOT.gPad.RedrawAxis()
            
            legend = ROOT.TLegend(0.745,cvymax,0.99,cvymax-0.075*len(legendEntries))
            #legend = ROOT.TLegend(0.73,0.9,0.95,0.745-0.052*len(legendEntries))
            
            #legend = ROOT.TLegend(0.7,0.72,0.95,0.72-0.07*len(legendEntries))
            
            legend.SetFillColor(ROOT.kWhite)
            legend.SetBorderSize(0)
            legend.SetTextFont(43)
            legend.SetTextSize(28)
            for entry in reversed(legendEntries):
                legend.AddEntry(entry[0],entry[1],entry[2])
            '''
            pText=ROOT.TPaveText(cvxmin+0.1,0.86,cvxmin+0.1,0.86,"NDC")
            pText.SetFillColor(ROOT.kWhite)
            pText.SetBorderSize(0)
            pText.SetTextFont(63)
            pText.SetTextSize(24)
            pText.SetTextAlign(11)
            pText.AddText(qcd[2])
            pText.Draw("Same")
            '''
            pCMS=ROOT.TPaveText(cvxmin+0.085,0.95,cvxmin+0.085,0.95,"NDC")
            pCMS.SetFillColor(ROOT.kWhite)
            pCMS.SetBorderSize(0)
            pCMS.SetTextFont(63)
            pCMS.SetTextSize(28)
            pCMS.SetTextAlign(11)
            pCMS.AddText("CMS")
            pCMS.Draw("Same")
            
            pPreliminary=ROOT.TPaveText(cvxmin+0.165,0.95,cvxmin+0.165,0.95,"NDC")
            pPreliminary.SetFillColor(ROOT.kWhite)
            pPreliminary.SetBorderSize(0)
            pPreliminary.SetTextFont(53)
            pPreliminary.SetTextSize(28)
            pPreliminary.SetTextAlign(11)
            pPreliminary.AddText("Preliminary")
            pPreliminary.Draw("Same")
            
            
            pCat=ROOT.TPaveText(cvxmin+0.03,0.875,cvxmin+0.03,0.875,"NDC")
            pCat.SetFillColor(ROOT.kWhite)
            pCat.SetBorderSize(0)
            pCat.SetTextFont(63)
            pCat.SetTextSize(26)
            pCat.SetTextAlign(11)
            pCat.AddText(category[0])
            pCat.Draw("Same")
            
            pCut=ROOT.TPaveText(cvxmin+0.03,0.82,cvxmin+0.03,0.82,"NDC")
            pCut.SetFillColor(ROOT.kWhite)
            pCut.SetBorderSize(0)
            pCut.SetTextFont(43)
            pCut.SetTextSize(24)
            pCut.SetTextAlign(11)
            pCut.AddText(qcd[2])
            pCut.Draw("Same")
            
            pChi=ROOT.TPaveText(cvxmax-0.03,0.875,cvxmax-0.03,0.875,"NDC")
            pChi.SetFillColor(ROOT.kWhite)
            pChi.SetBorderSize(0)
            pChi.SetTextFont(43)
            pChi.SetTextSize(24)
            pChi.SetTextAlign(31)
            pChi.AddText("#lower[-0.18]{#chi^{2}}: %5.1f%%" % (100.0*sumHistData.Chi2Test(sumHistMC,"WW")))
            pChi.Draw("Same")
            
            pKS=ROOT.TPaveText(cvxmax-0.03,0.82,cvxmax-0.03,0.82,"NDC")
            pKS.SetFillColor(ROOT.kWhite)
            pKS.SetBorderSize(0)
            pKS.SetTextFont(43)
            pKS.SetTextSize(24)
            pKS.SetTextAlign(31)
            pKS.AddText("KS: %5.1f%%" % (100.0*sumHistData.KolmogorovTest(sumHistMC)))
            pKS.Draw("Same")
            
            pLumi=ROOT.TPaveText(cvxmax,0.95,cvxmax,0.95,"NDC")
            pLumi.SetFillColor(ROOT.kWhite)
            pLumi.SetBorderSize(0)
            pLumi.SetTextFont(43)
            pLumi.SetTextSize(28)
            pLumi.SetTextAlign(31)
            pLumi.AddText("2.1#kern[-0.5]{ }fb#lower[-0.7]{#scale[0.7]{-1}} (13TeV)")
            pLumi.Draw("Same")
            
            
            
            
            cv.cd(1)
            axisRes=None
            if unit!="":
                axisRes=ROOT.TH2F("axisRes"+str(random.random()),";"+variableTitle+" ("+unit+");Data/MC",50,binarray[0],binarray[-1],50,0.2,1.8)
            else:
                axisRes=ROOT.TH2F("axisRes"+str(random.random()),";"+variableTitle+";Data/MC",50,binarray[0],binarray[-1],50,0.2,1.8)
            axisRes.GetYaxis().SetNdivisions(406)
            axisRes.GetXaxis().SetNdivisions(504)
            axisRes.GetXaxis().SetTickLength(0.025/(1-cv.GetPad(1).GetLeftMargin()-cv.GetPad(1).GetRightMargin()))
            axisRes.GetYaxis().SetTickLength(0.015/(1-cv.GetPad(1).GetTopMargin()-cv.GetPad(1).GetBottomMargin()))

            axisRes.Draw("AXIS")
            
            
            
            rootObj=[]
            sumHistRes=sumHistData.Clone()
            for ibin in range(sumHistData.GetNbinsX()):
                c = sumHistMC.GetBinCenter(ibin+1)
                w = sumHistMC.GetBinWidth(ibin+1)
                m = sumHistMC.GetBinContent(ibin+1)
                d = sumHistData.GetBinContent(ibin+1)
                
                if m>0.0:
                    sumHistRes.SetBinContent(ibin+1,d/m)
                    sumHistRes.SetBinError(ibin+1,math.sqrt(d)/m)
                else:
                    sumHistRes.SetBinContent(ibin+1,0.0)
                    sumHistRes.SetBinError(ibin+1,0)
                    
                if d>0:
                    h = min(sumHistMC.GetBinError(ibin+1)/sumHistData.GetBinContent(ibin+1),0.8)
                    box = ROOT.TBox(c-0.5*w,1-h,c+0.5*w,1+h)
                    box.SetFillStyle(3245)
                    box.SetLineColor(ROOT.kGray+1)
                    box.SetFillColor(ROOT.kGray)
                    box.SetLineWidth(2)
                    rootObj.append(box)
                    box.Draw("SameF")
                    box2 = ROOT.TBox(c-0.5*w,1-h,c+0.5*w,1+h)
                    box2.SetFillStyle(0)
                    box2.SetLineColor(ROOT.kGray+1)
                    box2.SetFillColor(ROOT.kGray)
                    box2.SetLineWidth(2)
                    rootObj.append(box2)
                    box2.Draw("SameL")

            sumHistRes.Draw("PESame")
            if len(rootObj)>0:
                legend.AddEntry(rootObj[0],"MC stat.","F")
            
            
            axisLine = ROOT.TF1("axisLine"+str(random.random()),"1",binarray[0],binarray[-1])
            axisLine.SetLineColor(ROOT.kBlack)
            axisLine.SetLineWidth(1)
            axisLine.Draw("SameL")
            ROOT.gPad.RedrawAxis()
            
            
            
            hidePave=ROOT.TPaveText(0.07,resHeight-0.04,cvxmin-0.005,resHeight+0.03,"NDC")
            hidePave.SetFillColor(ROOT.kGray)
            hidePave.SetFillStyle(1001)
            #hidePave.Draw("Same")
            
            cv.cd(2)
            legend.Draw("Same")
            
            cv.Update()
            cv.Print("plots25ns/"+category[0]+"/"+outputName+"_MG.pdf")
            cv.Print("plots25ns/"+category[0]+"/"+outputName+"_MG.png")
            cv.WaitPrimitive()
            #break
        #break
    #break
#break





