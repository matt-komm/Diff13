import ROOT
import pyTool
import numpy
import math
import os
import os.path
import re
import random

ROOT.gROOT.Reset()
#ROOT.gROOT.SetBatch(True)
ROOT.gStyle.SetOptStat(0)
ROOT.gStyle.SetOptFit(0)
ROOT.gROOT.Reset()
ROOT.gROOT.SetStyle("Plain")
ROOT.gStyle.SetOptStat(0)
ROOT.gStyle.SetOptFit(1111)
ROOT.gStyle.SetPadTopMargin(0.08)
ROOT.gStyle.SetPadLeftMargin(0.13)
ROOT.gStyle.SetPadRightMargin(0.06)
ROOT.gStyle.SetPadBottomMargin(0.15)
ROOT.gStyle.SetMarkerSize(0.16)
ROOT.gStyle.SetHistLineWidth(1)
ROOT.gStyle.SetStatFontSize(0.025)
ROOT.gStyle.SetLabelSize(0.055, "XYZ")

ROOT.gStyle.SetOptFit()
ROOT.gStyle.SetOptStat(0)

# For the canvas:
ROOT.gStyle.SetCanvasBorderMode(0)
ROOT.gStyle.SetCanvasColor(ROOT.kWhite)
ROOT.gStyle.SetCanvasDefH(600) #Height of canvas
ROOT.gStyle.SetCanvasDefW(600) #Width of canvas
ROOT.gStyle.SetCanvasDefX(0)   #POsition on screen
ROOT.gStyle.SetCanvasDefY(0)

# For the Pad:
ROOT.gStyle.SetPadBorderMode(0)
# ROOT.gStyle.SetPadBorderSize(Width_t size = 1)
ROOT.gStyle.SetPadColor(ROOT.kWhite)
#ROOT.gStyle.SetPadGridX(True)
#ROOT.gStyle.SetPadGridY(True)
ROOT.gStyle.SetGridColor(ROOT.kBlack)
ROOT.gStyle.SetGridStyle(2)
ROOT.gStyle.SetGridWidth(1)

# For the frame:

ROOT.gStyle.SetFrameBorderMode(0)
ROOT.gStyle.SetFrameBorderSize(0)
ROOT.gStyle.SetFrameFillColor(0)
ROOT.gStyle.SetFrameFillStyle(0)
ROOT.gStyle.SetFrameLineColor(1)
ROOT.gStyle.SetFrameLineStyle(1)
ROOT.gStyle.SetFrameLineWidth(0)

# For the histo:
# ROOT.gStyle.SetHistFillColor(1)
# ROOT.gStyle.SetHistFillStyle(0)
ROOT.gStyle.SetHistLineColor(1)
ROOT.gStyle.SetHistLineStyle(0)
ROOT.gStyle.SetHistLineWidth(1)
# ROOT.gStyle.SetLegoInnerR(Float_t rad = 0.5)
# ROOT.gStyle.SetNumberContours(Int_t number = 20)

ROOT.gStyle.SetEndErrorSize(2)
#ROOT.gStyle.SetErrorMarker(20)
ROOT.gStyle.SetErrorX(0.)

ROOT.gStyle.SetMarkerStyle(20)
#ROOT.gStyle.SetMarkerStyle(20)

#For the fit/function:
ROOT.gStyle.SetOptFit(1)
ROOT.gStyle.SetFitFormat("5.4g")
ROOT.gStyle.SetFuncColor(2)
ROOT.gStyle.SetFuncStyle(1)
ROOT.gStyle.SetFuncWidth(1)

#For the date:
ROOT.gStyle.SetOptDate(0)
# ROOT.gStyle.SetDateX(Float_t x = 0.01)
# ROOT.gStyle.SetDateY(Float_t y = 0.01)

# For the statistics box:
ROOT.gStyle.SetOptFile(0)
ROOT.gStyle.SetOptStat(0) # To display the mean and RMS:   SetOptStat("mr")
ROOT.gStyle.SetStatColor(ROOT.kWhite)
ROOT.gStyle.SetStatFont(42)
ROOT.gStyle.SetStatFontSize(0.025)
ROOT.gStyle.SetStatTextColor(1)
ROOT.gStyle.SetStatFormat("6.4g")
ROOT.gStyle.SetStatBorderSize(1)
ROOT.gStyle.SetStatH(0.1)
ROOT.gStyle.SetStatW(0.15)

ROOT.gStyle.SetHatchesSpacing(0.8)
ROOT.gStyle.SetHatchesLineWidth(2)

# ROOT.gStyle.SetStaROOT.TStyle(Style_t style = 1001)
# ROOT.gStyle.SetStatX(Float_t x = 0)
# ROOT.gStyle.SetStatY(Float_t y = 0)


#ROOT.gROOT.ForceStyle(True)
#end modified

# For the Global title:

ROOT.gStyle.SetOptTitle(0)

# ROOT.gStyle.SetTitleH(0) # Set the height of the title box
# ROOT.gStyle.SetTitleW(0) # Set the width of the title box
#ROOT.gStyle.SetTitleX(0.35) # Set the position of the title box
#ROOT.gStyle.SetTitleY(0.986) # Set the position of the title box
# ROOT.gStyle.SetTitleStyle(Style_t style = 1001)
#ROOT.gStyle.SetTitleBorderSize(0)

# For the axis titles:
ROOT.gStyle.SetTitleColor(1, "XYZ")
ROOT.gStyle.SetTitleFont(43, "XYZ")
ROOT.gStyle.SetTitleSize(32, "XYZ")
# ROOT.gStyle.SetTitleXSize(Float_t size = 0.02) # Another way to set the size?
# ROOT.gStyle.SetTitleYSize(Float_t size = 0.02)
ROOT.gStyle.SetTitleXOffset(1.135)
#ROOT.gStyle.SetTitleYOffset(1.2)
ROOT.gStyle.SetTitleOffset(1.15, "YZ") # Another way to set the Offset

# For the axis labels:

ROOT.gStyle.SetLabelColor(1, "XYZ")
ROOT.gStyle.SetLabelFont(43, "XYZ")
ROOT.gStyle.SetLabelOffset(0.0077, "XYZ")
ROOT.gStyle.SetLabelSize(28, "XYZ")
#ROOT.gStyle.SetLabelSize(0.04, "XYZ")

# For the axis:

ROOT.gStyle.SetAxisColor(1, "XYZ")
ROOT.gStyle.SetAxisColor(1, "XYZ")
ROOT.gStyle.SetStripDecimals(True)
ROOT.gStyle.SetTickLength(0.03, "Y")
ROOT.gStyle.SetTickLength(0.05, "X")
ROOT.gStyle.SetNdivisions(505, "X")
ROOT.gStyle.SetNdivisions(512, "Y")

ROOT.gStyle.SetPadTickX(1)  # To get tick marks on the opposite side of the frame
ROOT.gStyle.SetPadTickY(1)

# Change for log plots:
ROOT.gStyle.SetOptLogx(0)
ROOT.gStyle.SetOptLogy(0)
ROOT.gStyle.SetOptLogz(0)

#ROOT.gStyle.SetPalette(1) #(1,0)

# another top group addition

# Postscript options:
#ROOT.gStyle.SetPaperSize(20., 20.)
#ROOT.gStyle.SetPaperSize(ROOT.TStyle.kA4)
#ROOT.gStyle.SetPaperSize(27., 29.7)
#ROOT.gStyle.SetPaperSize(27., 29.7)
ROOT.TGaxis.SetMaxDigits(3)
ROOT.gStyle.SetLineScalePS(2)

# ROOT.gStyle.SetLineStyleString(Int_t i, const char* text)
# ROOT.gStyle.SetHeaderPS(const char* header)
# ROOT.gStyle.SetTitlePS(const char* pstitle)
#ROOT.gStyle.SetColorModelPS(1)

# ROOT.gStyle.SetBarOffset(Float_t baroff = 0.5)
# ROOT.gStyle.SetBarWidth(Float_t barwidth = 0.5)
# ROOT.gStyle.SetPaintTextFormat(const char* format = "g")
# ROOT.gStyle.SetPalette(Int_t ncolors = 0, Int_t* colors = 0)
# ROOT.gStyle.SetTimeOffset(Double_t toffset)
# ROOT.gStyle.SetHistMinimumZero(kTRUE)
ROOT.gStyle.SetPalette(1)
ROOT.gStyle.SetPaintTextFormat("4.2f")


def getHist1D(hist,fileName,processName,variableName,weight):
    hist.SetDirectory(0)
    rootFile = ROOT.TFile(f)
    tree = rootFile.Get(processName)
    tempHist=hist.Clone()
    tempHist.Scale(0)
    tempHist.SetEntries(0)
    tempHist.SetName("hist_"+processName+str(random.random()))
    if (tree):
        tree.Project(tempHist.GetName(),variableName,weight)
        tempHist.SetDirectory(0)
        hist.Add(tempHist)
    rootFile.Close()
    
def getHist2D(hist,fileName,processName,variableNameX,variableNameY,weight):
    hist.SetDirectory(0)
    rootFile = ROOT.TFile(f)
    tree = rootFile.Get(processName)
    tempHist=hist.Clone()
    tempHist.Scale(0)
    tempHist.SetEntries(0)
    if (tree):
        tree.Project(tempHist.GetName(),variableNameY+":"+variableNameX,weight)
        tempHist.SetDirectory(0)
        hist.Add(tempHist)
    rootFile.Close()
    
def normalizeByBinWidth(hist):
    #hist.Scale(1./(hist.GetXaxis().GetXmax()-hist.GetXaxis().GetXmin())/hist.Integral())
    hist.Scale(1./hist.Integral())
    for ibin in range(hist.GetNbinsX()):
        hist.SetBinError(ibin+1,hist.GetBinError(ibin+1)/hist.GetBinWidth(ibin+1))
        hist.SetBinContent(ibin+1,hist.GetBinContent(ibin+1)/hist.GetBinWidth(ibin+1))
        
        
def buildResponseMatrix(responseMatrix, efficiencyHist):
    res = responseMatrix.Clone()
    for igen in range(responseMatrix.GetNbinsX()):
        res.SetBinContent(igen+1,0,efficiencyHist.GetBinContent(igen+1))
    return res
    
def doScan(tunfold,genBins):
    N=100
    xvalues = numpy.logspace(-8,-2,N)
    yvalues = numpy.zeros((len(genBins)-1,N))
    for i in range(N):
        bestTau = xvalues[i]
        covariance = ROOT.TH2D("correlation","",len(genBins)-1,genBins,len(genBins)-1,genBins)
        unfoldedHist = ROOT.TH1D("unfoldedHist","",len(genBins)-1,genBins)
        unfoldedHist.Sumw2()
        tunfold.doUnfolding(bestTau,unfoldedHist,covariance)
        rhos = ROOT.PyUtils.getBinByBinCorrelations(covariance)
        for ibin in range(len(genBins)-1):
            yvalues[ibin][i]=rhos[ibin]
    cv = ROOT.TCanvas("cvScan","",800,600)
    cv.SetLogx()
    cv.SetRightMargin(0.18)
    axis = ROOT.TH2F("axisScan",";#tau;#rho",50,xvalues[0],xvalues[-1],50,-1.1,1.1)
    axis.Draw("AXIS")
    rootObj =[]
    legend = ROOT.TLegend(0.83,0.9,0.99,0.5)
    legend.SetFillColor(ROOT.kWhite)
    legend.SetBorderSize(0)
    legend.SetTextFont(42)
    for ibin in range(len(genBins)-2):
        graph = ROOT.TGraph(N,xvalues,yvalues[ibin+1])
        graph.SetLineWidth(len(genBins)-ibin)
        graph.SetLineColor(ROOT.kBlue-ibin+2)
        rootObj.append(graph)
        graph.Draw("SameL")
        legend.AddEntry(graph,"#rho (1,"+str(ibin+2)+")","L")
    graph = ROOT.TGraph(N,xvalues,yvalues[0])
    graph.SetLineWidth(3)
    graph.SetLineColor(ROOT.kOrange+10)
    graph.SetLineStyle(2)
    rootObj.append(graph)
    graph.Draw("SameL")
    legend.AddEntry(graph,"#bar{#rho}","L")
    legend.Draw("Same")
    cv.Update()
    cv.WaitPrimitive()

    
globalWeight="1"
#globalWeight="((SingleTop_1__LightJet_1__Eta*SingleTop_1__LightJet_1__Eta)<9.0)*((SingleTop_1__BJet_1__Eta*SingleTop_1__BJet_1__Eta)<9.0)"
#globalWeight="(((SingleTop_1__LightJet_1__Eta*SingleTop_1__LightJet_1__Eta)>9.0)||((SingleTop_1__BJet_1__Eta*SingleTop_1__BJet_1__Eta)>9.0))"

#globalWeight="(Reconstructed_1__isBarrel==0)"

#TODO: 
#variate Reconstructed_1__btagging_nominal, btagging_bc_down, btagging_l_down, btagging_bc_up, btagging_l_up
#variate Reconstructed_1__PU69000_weight,Reconstructed_1__PU65500_weight,Reconstructed_1__PU72500_weight 

globalMCWeight=globalWeight+"*Reconstructed_1__PU69000_weight*Reconstructed_1__btagging_nominal*(Reconstructed_1__HLT_IsoMu20_v1==1)*2119.4/0.7*mc_weight"
globalDataWeight=globalWeight+"*1"

#TODO: 
#variate EnDown,EnUp,ResDown,ResUp
#isocut 0.12 - 0.4; 0.4 - 100.0 

syst = ""
relIsoDown="0.12"
relIsoUp="100.0"

sampleDict = {
    "tChannel":
    {
        "processes":[
            "ST_t-channel_4f_leptonDecays_13TeV-amcatnlo-pythia8_TuneCUETP8M1_iso"+syst,
            "ST_t-channel_4f_leptonDecays_13TeV-amcatnlo-pythia8_TuneCUETP8M1_ext_iso"+syst,
        ],
        "color":ROOT.gROOT.GetColor(ROOT.kRed),
        "title":"t-channel",
        "weight":globalMCWeight+"*0.5*((Generated_1__genweight<0)*(-1)+(Generated_1__genweight>0)*1)"
    },

    "tWChannel":
    {
        "processes":[
            "ST_tW_top_5f_inclusiveDecays_13TeV-powheg-pythia8_TuneCUETP8M1_iso"+syst,
            "ST_tW_antitop_5f_inclusiveDecays_13TeV-powheg-pythia8_TuneCUETP8M1_iso"+syst
        ],
        "color":ROOT.gROOT.GetColor(ROOT.kOrange),
        "title":"tW-channel",
        "weight":globalMCWeight+"*((Generated_1__genweight<0)*(-1)+(Generated_1__genweight>0)*1)"
    },

    "TTJets":
    {
        "processes":[
            "TT_TuneCUETP8M1_13TeV-powheg-pythia8_ext_iso"+syst
        ],
        "color":ROOT.gROOT.GetColor(ROOT.kOrange-3),
        "title":"t#bar{t}",
        "weight":globalMCWeight+"*((Generated_1__genweight<0)*(-1)+(Generated_1__genweight>0)*1)"
    },
    
    "WJetsAMC":
    {
        "processes":[
            "WJetsToLNu_TuneCUETP8M1_13TeV-amcatnloFXFX-pythia8_iso"+syst
        ],
        "color":ROOT.gROOT.GetColor(ROOT.kGreen-2),
        "title":"W+jets",
        "addtitle":"(aMC@NLO)",
        "weight":globalMCWeight+"*((Generated_1__genweight<0)*(-1)+(Generated_1__genweight>0)*1)"
    },
    
    "WJetsMG":
    {
        "processes":[
            "WJetsToLNu_TuneCUETP8M1_13TeV-madgraphMLM-pythia8_iso"+syst
        ],
        "color":ROOT.gROOT.GetColor(ROOT.kGreen-2),
        "title":"W+jets",
        "addtitle":"(MadGraph)",
        "weight":globalMCWeight+"*((Generated_1__genweight<0)*(-1)+(Generated_1__genweight>0)*1)"
    },
    
    "DY":
    {
        "processes":[
            "DYJetsToLL_M-50_TuneCUETP8M1_13TeV-amcatnloFXFX-pythia8_iso"+syst
        ],
        "color":ROOT.gROOT.GetColor(ROOT.kBlue-1),
        "title":"Drell-Yan",
        "weight":globalMCWeight+"*((Generated_1__genweight<0)*(-1)+(Generated_1__genweight>0)*1)"
    },

    "QCD":
    {
        "processes":[
            "QCD_Pt-20toInf_MuEnrichedPt15_TuneCUETP8M1_13TeV_pythia8_iso"+syst,
        ],
        "color":ROOT.gROOT.GetColor(ROOT.kGray),
        "title":"QCD (MC)",# #lower[-0.06]{#scale[0.85]{#times#frac{1}{5}}}",
        "weight":globalMCWeight+"*((Generated_1__genweight<0)*(-1)+(Generated_1__genweight>0)*1)"
    },
    
    "MC_antiiso":
    {
        "processes":[
            "ST_t-channel_4f_leptonDecays_13TeV-amcatnlo-pythia8_TuneCUETP8M1_antiiso",
            "ST_tW_top_5f_inclusiveDecays_13TeV-powheg-pythia8_TuneCUETP8M1_antiiso",
            "ST_tW_antitop_5f_inclusiveDecays_13TeV-powheg-pythia8_TuneCUETP8M1_antiiso",
            "TT_TuneCUETP8M1_13TeV-powheg-pythia8_ext_antiiso",
            #"WJetsToLNu_TuneCUETP8M1_13TeV-amcatnloFXFX-pythia8_antiiso",
            "WJetsToLNu_TuneCUETP8M1_13TeV-madgraphMLM-pythia8_antiiso",
            "DYJetsToLL_M-50_TuneCUETP8M1_13TeV-amcatnloFXFX-pythia8_antiiso"
        ],
        "color":ROOT.gROOT.GetColor(ROOT.kBlue-1),
        "title":"QCD (DD)",
        "weight":globalMCWeight+"*(-1.0)*((Generated_1__genweight<0)*(-1)+(Generated_1__genweight>0)*1)*(Reconstructed_1__TightMuon_1__relIso>"+relIsoDown+")*(Reconstructed_1__TightMuon_1__relIso<"+relIsoUp+")"
    },
    
    "data1_antiiso":
    {
        "processes":[
            "SingleMuon_Run2015D-05Oct2015-v1_antiiso",
        ],
        "color":ROOT.gROOT.GetColor(ROOT.kBlack),
        "title":"Data",
        "weight":globalDataWeight+"*((Reconstructed_1__HLT_IsoMu20_v2==1)+(Reconstructed_1__HLT_IsoMu20_v3==1))*(Reconstructed_1__TightMuon_1__relIso>"+relIsoDown+")*(Reconstructed_1__TightMuon_1__relIso<"+relIsoUp+")"
    },
    
    "data2_antiiso":
    {
        "processes":[
            "SingleMuon_Run2015D-PromptReco-v4_antiiso",
        ],
        "color":ROOT.gROOT.GetColor(ROOT.kBlack),
        "title":"Data",
        "weight":globalDataWeight+"*(Reconstructed_1__HLT_IsoMu20_v3==1)*(Reconstructed_1__TightMuon_1__relIso>"+relIsoDown+")*(Reconstructed_1__TightMuon_1__relIso<"+relIsoUp+")"
    },
    
    "data1":
    {
        "processes":[
            "SingleMuon_Run2015D-05Oct2015-v1_iso",
        ],
        "color":ROOT.gROOT.GetColor(ROOT.kBlack),
        "title":"Data",
        "weight":globalDataWeight+"*((Reconstructed_1__HLT_IsoMu20_v2==1)+(Reconstructed_1__HLT_IsoMu20_v3==1))"
    },
    
    "data2":
    {
        "processes":[
            "SingleMuon_Run2015D-PromptReco-v4_iso",
        ],
        "color":ROOT.gROOT.GetColor(ROOT.kBlack),
        "title":"Data",
        "weight":globalDataWeight+"*(Reconstructed_1__HLT_IsoMu20_v3==1)"
    }
}

rootFiles=[]
rootResponseFiles=[]
rootEfficiencyFiles=[]

basedirMC = os.path.join(os.getcwd(),"evaluate25ns")
matchMC = re.compile("mc[0-9]+.root")
basedirResponse = os.path.join(os.getcwd(),"selection25nsResponse")
matchResponse = re.compile("selected[0-9]+.root")
basedirEfficiency = os.path.join(os.getcwd(),"selection25nsResponse")
matchEfficiency = re.compile("efficiency[0-9]+.root")
basedirData = os.path.join(os.getcwd(),"evaluate25nsData")
matchData = re.compile("data[0-9]+.root")

for f in os.listdir(basedirMC):
    if matchMC.match(f):
        rootFiles.append(os.path.join(basedirMC,f))
        
for f in os.listdir(basedirResponse):
    if matchResponse.match(f):
        rootResponseFiles.append(os.path.join(basedirResponse,f))
        
for f in os.listdir(basedirEfficiency):
    if matchEfficiency.match(f):
        rootEfficiencyFiles.append(os.path.join(basedirEfficiency,f))

for f in os.listdir(basedirData):
    if matchData.match(f):
        rootFiles.append(os.path.join(basedirData,f))
        
print "found ",len(rootFiles)," files"


uncertainties = {
    "other":ROOT.PyFit.Parameter("other"),
    "topbg":ROOT.PyFit.Parameter("topbg"),
    "tChan":ROOT.PyFit.Parameter("tChan"),
    "qcd_2j1t":ROOT.PyFit.Parameter("qcd_2j1t"),
    #"qcd_3j1t":ROOT.PyFit.Parameter("qcd_3j1t"),
    #"qcd_3j2t":ROOT.PyFit.Parameter("qcd_3j2t"),
    
    #"lumi":{"type":"gauss","config":{"mean": "1.0", "width":"0.1", "range":"(0.0,\"inf\")"}}
}
uncertainties["topbg"].setPrior(ROOT.TF1("top","TMath::LogNormal(x,0.01397)"))


observables = {
    #"1j": {
    #    "weight":"(Reconstructed_1__nSelectedJet==1)"
    #},
    #"2j0t": {
    #    "weight":"(Reconstructed_1__nSelectedJet==2)*(Reconstructed_1__nSelectedBJet==0)"
    #},
    "2j1t": {
        "weight":"(Reconstructed_1__nSelectedJet==2)*(Reconstructed_1__nSelectedBJet==1)"
    },
    #"3j0t": {
    #    "weight":"(Reconstructed_1__nSelectedJet==3)*(Reconstructed_1__nSelectedBJet==0)"
    #},
    #"3j1t": {
    #    "weight":"(Reconstructed_1__nSelectedJet==3)*(Reconstructed_1__nSelectedBJet==1)"
    #},
    #"3j2t": {
    #   "weight":"(Reconstructed_1__nSelectedJet==3)*(Reconstructed_1__nSelectedBJet==2)"
    #},
}

binning=30
ranges=[0.0,150.0]
varName="(SingleTop_1__mtw_beforePz<50.0)*SingleTop_1__mtw_beforePz+(SingleTop_1__mtw_beforePz>50.0)*(Reconstructed_1__BDT_boost02_minnode005_maxvar2_ntree1000_invboost*60.0+100.0)"

'''
components={
    "other":
    {
        "sets":["WJetsAMC","DY"],
        "uncertainties":["other"],
        "weight":"1",
        "color":ROOT.kGreen+1,
    },
    "topbg":
    {
        "sets":["tWChannel","TTJets"],
        "uncertainties":["topbg"],
        "weight":"1",
        "color":ROOT.kOrange,
    },
    "tChan":
    {
        "sets":["tChannel"],
        "uncertainties":["tChan"],
        "weight":"1",
        "color":ROOT.kMagenta,
    },
    "QCD":
    {
        "sets":["QCD"],
        "uncertainties":["qcd"],
        "weight":"1",
        "color":ROOT.kGray+1,
    }
    "WBF":
    {
        "sets":["WJetsMG"],
        "uncertainties":["other","BF"],
        "weight":"(Reconstructed_1__nBFlavorSelectedJet>0)",
        "color":ROOT.kGreen+2
    },
    "WCF":
    {
        "sets":["WJetsMG"],
        "uncertainties":["other","CF"],
        "weight":"(Reconstructed_1__nBFlavorSelectedJet==0)*(Reconstructed_1__nCFlavorSelectedJet>0)",
        "color":ROOT.kGreen-3
    },
    "WLF":
    {
        "sets":["WJetsMG"],
        "uncertainties":["other","LF"],
        "weight":"(Reconstructed_1__nBFlavorSelectedJet==0)*(Reconstructed_1__nCFlavorSelectedJet==0)",
        "color":ROOT.kGreen-7
    },
}
'''

components={
    
    "tChan":
    {
        "sets":["tChannel"],
        "uncertainties":["tChan"],
        "weight":"1",
        "color":ROOT.kMagenta+2
    },
    
    "topbg":
    {
        "sets":["tWChannel","TTJets"],
        "uncertainties":["topbg"],
        "weight":"1",
        "color":ROOT.kOrange+1
    },

    "other":
    {
        "sets":["WJetsMG","DY"],
        "uncertainties":["other"],
        "weight":"1",
        "color":ROOT.kGreen+1
    },
    
    #"QCD":
    #{
    #    "sets":["QCD"],
    #    "uncertainties":["qcd"],
    #    "weight":"1",
    #    "color":ROOT.kGray+1
    #}
    
    "QCD_2j1t":
    {
        "sets":["data1_antiiso","data2_antiiso","MC_antiiso"],
        "uncertainties":["qcd_2j1t"],
        "weight":"(Reconstructed_1__nSelectedJet==2)*(Reconstructed_1__nSelectedBJet==1)",
        "color":ROOT.kGray+1
    },
    
    #"QCD_3j1t":
    #{
    #    "sets":["data1_antiiso","data2_antiiso","MC_antiiso"],
    #    "uncertainties":["qcd_3j1t"],
    #    "weight":"(Reconstructed_1__nSelectedJet==3)*(Reconstructed_1__nSelectedBJet==1)",
    #    "color":ROOT.kGray+1
    #},
    
    #"QCD_3j2t":
    #{
    #    "sets":["data1_antiiso","data2_antiiso","MC_antiiso"],
    #    "uncertainties":["qcd_3j2t"],
    #    "weight":"(Reconstructed_1__nSelectedJet==3)*(Reconstructed_1__nSelectedBJet==2)",
    #    "color":ROOT.kGray+1
    #},
}

data = {
    "sets":["data1","data2"],
    "weight":"1"
}

recoBins = numpy.array([0.,20.,40.,60.,80.,100.,120.,140.,160.,180.,200.,250.,300.])
genBins =  numpy.array([0.,    40.,    80.,     120.,     160.,     200.,     300.])


samplesForUnfolding={}
'''
fit = ROOT.PyFit.MLFit()
        
for observableName in observables.keys():
    observable = ROOT.PyFit.Observable()
    observableWeight = observables[observableName]["weight"]
    
    for componentName in components.keys():
        componentWeight = components[componentName]["weight"]
        componentUncertainties = components[componentName]["uncertainties"]
        
        componentHist = ROOT.TH1F("hist_"+observableName+"_"+componentName+"_"+str(random.random()),";"+varName+";Events",binning,ranges[0],ranges[1])
        componentHist.Sumw2()
        componentHist.SetFillColor(components[componentName]["color"])
        componentHist.SetLineColor(components[componentName]["color"])
        
        if observableName=="2j1t":
            samplesForUnfolding[componentName]=ROOT.TH1D("pt"+componentName+str(random.random()),";reconstructed top p_{T}",len(recoBins)-1,recoBins)
            samplesForUnfolding[componentName].Sumw2()
            samplesForUnfolding[componentName].SetFillColor(components[componentName]["color"])
            samplesForUnfolding[componentName].SetLineColor(components[componentName]["color"])
            
        for componentSetName in components[componentName]["sets"]:
            for processName in sampleDict[componentSetName]["processes"]:
                processWeight = sampleDict[componentSetName]["weight"]
                weight = observableWeight+"*"+componentWeight+"*"+processWeight
                print observableName,processName
                for i,f in enumerate(rootFiles):
                    rootFile = ROOT.TFile(f)
                    tree = rootFile.Get(processName)
                    if (tree):                       
                        getHist1D(componentHist,f,processName,varName,weight) 
                        if observableName=="2j1t":
                            getHist1D(samplesForUnfolding[componentName],f,processName,"SingleTop_1__Top_1__Pt",weight+"*(Reconstructed_1__BDT_boost04_minnode005_maxvar2_ntree1000_invboost>0.2)") 
                    
                    rootFile.Close()
        
        component = ROOT.PyFit.ConstShapeComponent(componentHist)
        
        for uncertaintyName in componentUncertainties:
            component.addSFParameter(uncertainties[uncertaintyName])
        
        observable.addComponent(component)
    

    
    dataHist = ROOT.TH1F("hist_"+observableName+"_"+str(random.random()),";"+varName+";Events",binning,ranges[0],ranges[1])
    dataHist.Sumw2()

    if observableName=="2j1t":
        samplesForUnfolding["data"]=ROOT.TH1D("pt"+componentName+str(random.random()),";reconstructed top p_{T}",len(recoBins)-1,recoBins)
        samplesForUnfolding["data"].Sumw2()
        samplesForUnfolding["data"].SetMarkerStyle(20)
        samplesForUnfolding["data"].SetMarkerSize(0.9)
        
    componentWeight=data["weight"]
    
    for componentSetName in data["sets"]:
        for processName in sampleDict[componentSetName]["processes"]:
            processWeight = sampleDict[componentSetName]["weight"]
            weight=observableWeight+"*"+componentWeight+"*"+processWeight
            for i,f in enumerate(rootFiles):
                rootFile = ROOT.TFile(f)
                tree = rootFile.Get(processName)
                if (tree):
                    getHist1D(dataHist,f,processName,varName,weight)
                    if observableName=="2j1t":
                        getHist1D(samplesForUnfolding["data"],f,processName,"SingleTop_1__Top_1__Pt",weight+"*(Reconstructed_1__BDT_boost04_minnode005_maxvar2_ntree1000_invboost>0.2)") 
                rootFile.Close()

    prediction = ROOT.PyFit.Prediction(binning)
    observable.getPrediction(prediction)
    
    predictionHist = ROOT.TH1F("histPrediction_"+observableName+"_"+str(random.random()),";"+varName+";Events",binning,ranges[0],ranges[1])
    prediction.toRootHistogram(predictionHist)
    
    cv = ROOT.TCanvas("cv"+observableName,"",800,600)
    axis=ROOT.TH2F("axis"+observableName,";"+varName+";Events",binning,ranges[0],ranges[1],50,0,1.2*max(predictionHist.GetMaximum(),dataHist.GetMaximum()))
    axis.Draw("AXIS")
    predictionHist.SetFillColor(ROOT.kGray)
    predictionHist.SetFillStyle(1001)
    predictionHist.Draw("HISTSame")
    dataHist.SetMarkerStyle(21)
    dataHist.SetMarkerSize(0.9)
    dataHist.Draw("PESame")
    cv.Update()
    cv.WaitPrimitive()
    
    fit.addObservable(observable,dataHist)  

for uncertainty in uncertainties.values():
    fit.addParameter(uncertainty)

fit.minimize()

cv = ROOT.TCanvas("cv"+observableName,"",800,600)
stack = ROOT.THStack()
for name in components.keys():
    for uncName in components[name]["uncertainties"]:
        print uncName, uncertainties[uncName].getScaleFactor()
        samplesForUnfolding[name].Scale(uncertainties[uncName].getScaleFactor())
    stack.Add(samplesForUnfolding[name],"HIST")
stack.Draw()
samplesForUnfolding["data"].Draw("SamePE")
#cv.Update()
#cv.WaitPrimitive()
'''


responseMatrixSelected = ROOT.TH2D("responseMatrixSelected",";generated top p_{T};reconstructed top p_{T}",len(genBins)-1,genBins,len(recoBins)-1,recoBins)
responseMatrixSelected.Sumw2()
efficiencyHist = ROOT.TH1D("efficiencyHist","generated top p_{T}",len(genBins)-1,genBins)
efficiencyHist.Sumw2()
resolution = ROOT.TH1D("resolution",";generated top p_{T}-reconstructed top p_{T}",40,-100,100)
resolution.Sumw2()

N=0
for f in rootResponseFiles:
    for processName in [
        "ST_t-channel_4f_leptonDecays_13TeV-amcatnlo-pythia8_TuneCUETP8M1_iso",
        "ST_t-channel_4f_leptonDecays_13TeV-amcatnlo-pythia8_TuneCUETP8M1_ext_iso"
    ]:
        weight = "((Generated_1__genweight<0)*(-1)+(Generated_1__genweight>0)*1)*(Reconstructed_1__PU69000_weight*Reconstructed_1__btagging_nominal)"
        #weight = "1"
        cut = "(Reconstructed_1__HLT_IsoMu20_v1==1)*(Reconstructed_1__nSelectedJet==2)*(Reconstructed_1__nSelectedBJet==1)"
        cut +="*(Reconstructed_1__BDT_boost04_minnode005_maxvar2_ntree1000_invboost>0.2)"
        getHist2D(responseMatrixSelected,f,processName,"Generated_1__top_pt","SingleTop_1__Top_1__Pt",weight+"*"+cut)
        getHist1D(efficiencyHist,f,processName,"Generated_1__top_pt",weight+"*!("+cut+")")
        getHist1D(resolution,f,processName,"Generated_1__top_pt-SingleTop_1__Top_1__Pt",weight+"*"+cut)
        rootFile = ROOT.TFile(f)
        tree = rootFile.Get(processName)
        if tree:
            N+=tree.GetEntries()
#responseMatrixSelected.GetEntries()+responseMatrixUnselected.GetEntries()=N


for f in rootEfficiencyFiles:
    for processName in [
        "ST_t-channel_4f_leptonDecays_13TeV-amcatnlo-pythia8_TuneCUETP8M1",
        "ST_t-channel_4f_leptonDecays_13TeV-amcatnlo-pythia8_TuneCUETP8M1_ext"
    ]:
        getHist1D(efficiencyHist,f,processName,"Generated_1__top_pt","((Generated_1__genweight<0)*(-1)+(Generated_1__genweight>0)*1)")
        rootFile = ROOT.TFile(f)
        tree = rootFile.Get(processName)
        if tree:
            N+=tree.GetEntries()

genHist = efficiencyHist.Clone("generator")
genHist.Add(responseMatrixSelected.ProjectionX())

'''
### find optimal binning

mean = genHist.Integral()/8.0
ranges = [0]
s = 0
for ibin in range(genHist.GetNbinsX()):
    if s>=mean:
        ranges.append(genHist.GetBinCenter(ibin+1))
        s=0
    s+=genHist.GetBinContent(ibin+1)
print ranges


### plots shapes

cvShapes = ROOT.TCanvas("shapes","",800,600)
genHistNormalized=genHist.Clone(genHist.GetName()+"Norm")
normalizeByBinWidth(genHistNormalized)
genHistSelectedNormalized = responseMatrixSelected.ProjectionX("genHistSelectedNormalized")
normalizeByBinWidth(genHistSelectedNormalized)
recoHistSelectedNormalized = responseMatrixSelected.ProjectionY("recoHistSelectedNormalized")
normalizeByBinWidth(recoHistSelectedNormalized)
axisShapes = ROOT.TH2F("axisShapes",";top p_{T};Normalized events",50,0,genHistNormalized.GetXaxis().GetXmax(),50,0,1.2*max([genHistNormalized.GetMaximum(),genHistSelectedNormalized.GetMaximum(),recoHistSelectedNormalized.GetMaximum()]))
axisShapes.Draw("AXIS")

genHistNormalized.SetLineColor(ROOT.kGreen+1)
genHistNormalized.SetLineWidth(2)
genHistSelectedNormalized.SetLineColor(ROOT.kOrange+6)
genHistSelectedNormalized.SetLineWidth(3)
genHistSelectedNormalized.SetLineStyle(2)
recoHistSelectedNormalized.SetLineColor(ROOT.kBlue)
recoHistSelectedNormalized.SetLineWidth(2)

legend = ROOT.TLegend(0.6,0.85,0.9,0.6)
legend.SetTextFont(42)
legend.SetFillColor(ROOT.kWhite)
legend.SetBorderSize(0)
legend.AddEntry(genHistNormalized,"generated","L")
legend.AddEntry(genHistSelectedNormalized,"generated","L")
legend.AddEntry("","after selection","")
legend.AddEntry(recoHistSelectedNormalized,"reconstructed","L")
legend.Draw("Same")

genHistNormalized.Draw("SameHIST")
genHistSelectedNormalized.Draw("SameHIST")
recoHistSelectedNormalized.Draw("SameHIST")

cvShapes.Print("shapes.pdf")
cvShapes.Print("shapes.png")


### plot matrix
 
cvResponse = ROOT.TCanvas("response","",800,600)
responseMatrixSelectedNormalized = responseMatrixSelected.Clone(responseMatrixSelected.GetName()+"Norm")
#responseMatrixSelectedNormalized.RebinX(2)
#responseMatrixSelectedNormalized.RebinY(2)
for genBin in range(responseMatrixSelectedNormalized.GetNbinsX()):
    s = 0.0
    for recoBin in range(responseMatrixSelectedNormalized.GetNbinsY()):
        s+=responseMatrixSelectedNormalized.GetBinContent(genBin+1,recoBin+1)
    for recoBin in range(responseMatrixSelectedNormalized.GetNbinsY()):
        c = responseMatrixSelectedNormalized.GetBinContent(genBin+1,recoBin+1)
        responseMatrixSelectedNormalized.SetBinContent(genBin+1,recoBin+1,c/s)

cvResponse.SetRightMargin(0.19)
responseMatrixSelectedNormalized.GetXaxis().SetTitle("generated top p_{T} / GeV")
responseMatrixSelectedNormalized.GetYaxis().SetTitle("reconstructed top p_{T} / GeV")
responseMatrixSelectedNormalized.GetZaxis().SetRangeUser(-0.001,1.0)
responseMatrixSelectedNormalized.GetZaxis().SetTitle("P(gen.#rightarrow reco.)")
responseMatrixSelectedNormalized.SetMarkerSize(1.2)

responseMatrixSelectedNormalized.Draw("colz text")
cvResponse.Print("response.pdf")
cvResponse.Print("response.png")


### plot efficiency

cvSelectionEfficiency = ROOT.TCanvas("selectionEfficiency","",800,600)
selectionEfficiency=responseMatrixSelected.ProjectionX("selectionEfficiency")
selectionEfficiency.GetYaxis().SetTitle("selection efficiency")
selectionEfficiency.GetXaxis().SetTitle("generated top p_{T}")
selectionEfficiency.Divide(efficiencyHist)
selectionEfficiency.SetMarkerStyle(20)
selectionEfficiency.SetMarkerSize(0.9)
selectionEfficiency.GetYaxis().SetRangeUser(0,1.2*selectionEfficiency.GetMaximum())
selectionEfficiency.Draw()
cvSelectionEfficiency.Print("selectionEfficiency.pdf")
cvSelectionEfficiency.Print("selectionEfficiency.png")

cvResolution = ROOT.TCanvas("resolution","",800,600)
resolution.GetXaxis().SetTitle("#Delta top p_{T} (gen.-reco.) / GeV")
resolution.GetYaxis().SetTitle("MC Events")
resolution.SetMarkerStyle(20)
resolution.SetMarkerSize(0.9)
resolution.GetYaxis().SetRangeUser(0,1.2*resolution.GetMaximum())
resolution.Draw()
cvResolution.Print("resolution.pdf")
cvResolution.Print("resolution.png")


ROOT.gPad.Update()
ROOT.gPad.WaitPrimitive()
'''



responseMatrixUnfolding = buildResponseMatrix(responseMatrixSelected,efficiencyHist)
tunfold = ROOT.PyUnfold(responseMatrixUnfolding)
pseudoData = responseMatrixUnfolding.ProjectionY("pseudodata")
#pseudoData = samplesForUnfolding["tChan"].Clone("pseudodata")
'''
pseudoData.Add(samplesForUnfolding["topbg"])
pseudoData.Add(samplesForUnfolding["other"])
pseudoData.Add(samplesForUnfolding["QCD_2j1t"])

for ibin in range(pseudoData.GetNbinsX()):
    #mcweight = 1.64*10**-5
    #pseudoData.SetBinContent(ibin+1,mcweight*(pseudoData.GetBinContent(ibin+1)))
    pseudoData.SetBinError(ibin+1,math.sqrt(pseudoData.GetBinContent(ibin+1)))
    pass
pseudoData.Add(samplesForUnfolding["topbg"],-1.0)
pseudoData.Add(samplesForUnfolding["other"],-1.0)
pseudoData.Add(samplesForUnfolding["QCD_2j1t"],-1.0)
'''
tunfold.setData(pseudoData)
doScan(tunfold,genBins)
    
bestTau = 0.1*tunfold.scanTau()
covariance = ROOT.TH2D("correlation","",len(genBins)-1,genBins,len(genBins)-1,genBins)
unfoldedHist = ROOT.TH1D("unfoldedHist","",len(genBins)-1,genBins)
unfoldedHist.Sumw2()
tunfold.doUnfolding(bestTau,unfoldedHist,covariance)
print bestTau,ROOT.PyUtils.getBinByBinCorrelations(covariance)[0]

normalizeByBinWidth(genHist)
normalizeByBinWidth(unfoldedHist)

cvUnfold = ROOT.TCanvas("cv","",750,600)
cvUnfold.SetRightMargin(0.1)
ymax = genHist.GetMaximum()
for ibin in range(unfoldedHist.GetNbinsX()):
    ymax = max(ymax,unfoldedHist.GetBinContent(ibin+1)+unfoldedHist.GetBinError(ibin+1))
axis = ROOT.TH2F("axisUnfold",";p#lower[0.4]{#scale[0.7]{T}}#kern[-0.5]{ }(top) / GeV;1 #/#sigma #times d#sigma #/d#kern[-0.5]{ }p#lower[0.4]{#scale[0.7]{T}}#kern[-0.5]{ }(top) / #lower[-0.12]{#scale[0.7]{#frac{1}{GeV}}}",50,genBins[0],genBins[-1],50,0,1.2*ymax)
axis.Draw("AXIS")

genHist.SetLineColor(ROOT.kAzure-4)
genHist.SetLineWidth(2)
genHist.Draw("HISTSame")

unfoldedHist.SetMarkerStyle(20)
unfoldedHist.SetLineWidth(2)
unfoldedHist.SetMarkerSize(1)
unfoldedHist.Draw("SamePE")

pCMS=ROOT.TPaveText(1-cvUnfold.GetRightMargin()-0.6,0.94,1-cvUnfold.GetRightMargin()-0.6,0.94,"NDC")
pCMS.SetFillColor(ROOT.kWhite)
pCMS.SetBorderSize(0)
pCMS.SetTextFont(63)
pCMS.SetTextSize(30)
pCMS.SetTextAlign(11)
pCMS.AddText("CMS")
pCMS.Draw("Same")

pPreliminary=ROOT.TPaveText(1-cvUnfold.GetRightMargin()-0.6+0.11,0.94,1-cvUnfold.GetRightMargin()-0.6+0.11,0.94,"NDC")
pPreliminary.SetFillColor(ROOT.kWhite)
pPreliminary.SetBorderSize(0)
pPreliminary.SetTextFont(53)
pPreliminary.SetTextSize(30)
pPreliminary.SetTextAlign(11)
pPreliminary.AddText("Preliminary")
pPreliminary.Draw("Same")

pLumi=ROOT.TPaveText(1-cvUnfold.GetRightMargin(),0.94,1-cvUnfold.GetRightMargin(),0.94,"NDC")
pLumi.SetFillColor(ROOT.kWhite)
pLumi.SetBorderSize(0)
pLumi.SetTextFont(43)
pLumi.SetTextSize(30)
pLumi.SetTextAlign(31)
pLumi.AddText("2.1#kern[-0.5]{ }fb#lower[-0.7]{#scale[0.7]{-1}} (13TeV)")
pLumi.Draw("Same")

cvUnfold.Update()
cvUnfold.WaitPrimitive()



